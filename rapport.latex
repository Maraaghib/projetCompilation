\documentclass{article}
\usepackage[utf8]{inputenc}
\usepackage[french]{babel}
\usepackage[T1]{fontenc}
\usepackage{hyperref}

\title{Rapport du projet de compilation L3}
\author{Audoy Fran\c cois [Groupe A4]\\ Boutet Clement [Groupe A5]\\ Ahmad Boissetri Binzagr [Groupe A4]\\ Serigne Amsatou SEYE [Groupe A]1} \\

\begin{document}
\maketitle
\tableofcontents
\newpage
\section{Les fonctions utiles et les structures }
Les fonctions utiles sont seulement les fonctions fournies dans le fichier util.h auxquelles on a rajouté nos fonctions de traitement d'arbre .
\subsection{Structure Noeud}
\begin{verbatim}

struct Noeud{
  char *ETIQ;
  int codop; // correspond aux valeurs de l'enum contenues dans ppasclabison.h
  type* typeno; /*[0,T_com](si commande) ou [k,(T_int,T_boo)] (si expression) */
  Noeud *droit;
  Noeud *gauche;
};

typedef struct Noeud Noeud;
\end{verbatim}

\subsection{Structures ListeFonction et BilisteFonction}
La structure ListeFonction (LFON) permet de gérer les fonctions et de pouvoir y accéder facilement.
La strucure BilisteFonction permet de concaténer plus facilement les listes de fonctions.
\begin{verbatim}
/*Liste de fonctions*/
typedef struct cellfon{
  char *ID;
  BILENV PARAM;    /* pametres formels types   */
  BILENV VARLOC;   /* variables locales typees */
  Noeud* CORPS;
  type* typeno;
  struct cellfon *SUIV;} *LFON;

/* biliste de fonctions */
typedef struct bilfon{
  LFON debut;
  LFON fin;}*BILFON;
\end{verbatim}

\subsection{Structures Environnement des Biliste d'Environnement}
La structure Environnement permet de gérer les différents environnements.
La Biliste d'Environnement est là pour la même raison que la biliste de fonctions.
\begin{verbatim}
typedef struct cellenv{
  char *ID;
  type* typeno;
  int  VAL;
  struct cellenv *SUIV;} *ENV;

/* biliste de var ou param */
typedef struct bilenv{
  ENV debut;
  ENV fin;}*BILENV;
\end{verbatim}

\subsection{Structure type}

Cette structure permet de stocker les types des fonctions et des variables, le champs DIM est là pour le cas des tableaux (ce champs vaut 0 si ce n'est pas un tableaux, >=1 sinon).

\begin{verbatim}
typedef struct stype{
  int DIM;   /* dimension ; vaut 0 ssi type de base                           */
  int TYPEF; /* type des cellules de plus petite dim: T_int ou T_boo ou T_com */
  int *tabval; /* necessaire pour la gestion des tableaux*/
}type;

\end{verbatim}

\section{Analyse syntaxique}
Pour cette partie, nous avons repris le langage proposé dans le sujet, nous avons juste rajouté des indications à bison à propos de la façon de traiter certaines instructions (telle que "Se" et "WhDo" et "IfThEl").

Lors de l'analyse syntaxique, l'arbre, les différents environnements et la liste de fonctions/procédures se remplissent.
L'arbre est rempli en priorité à gauche (c'est à dire si un noeud de l'arbre doit avoir un seul fils, il se situera à gauche).

La difficulté principale était de bien gérer les environnements global et local. Pour résoudre ce problème, nous avons utilisé deux variables de type BILENV(Biliste d'environemment): la première variable stocke l'environnement courant (c'est à dire que en dehors des fonctions cet environnement correspond à l'environnement gloabl); la deuxième variable, elle, stocke l'environnement global afin de toujours y avoir accés.

\section{Analyse sémantique}
Dans la réalisation de cette partie , nous avons repris et adapté le code réalisé en TP machine (TP 6 et TP 7).\\
On éxécute l'analyse sémantique pendant que l'on remplit notre arbre. L'analyse sémantique à pour rôle de détecter si il y a des erreurs dans le typage des variables.\\
Nous n'avons pas réussi à bien coder l'analyse sémantique pour les cas  des tableaux et les cas des fonctions / procedures.
Les tableaux ne sont pas détectés en tant que tels par l'analyseur.\\
Donc de ce fait l'analyseur détecte une erreur alors qu'elle n'a pas lieu d'être.\\
Malgré cela l'analyseur détecte tous les autres types d'erreurs correctement.\\

\section{Interpréteur du language Pseudo-Pascal}

Encore une fois la majorité du code à été repris dans les TP machines.
On a rencontré des difficultés , lorsque l'on à du faire face à des appels de fonctions\\.
La principale difficulté des appels de fonctions étant de gérér correctement les environnements.\\
Quels sont les environnements locaux, globals. Il a également fallu que l'on affecte ces environnements dans certains cas.


\section{Interpreteur C3A }
Dans cette partie,nous avons réutilisé une bonne partie du code de l'interpréteur C3A du mini-projet.
Elle interprète principalement, cas par cas, les différents opérateurs comme indiqués dans le sujet : Pl, Mo, Mu, And, Or, Lt, Ind, Not, Af, Afc, AfInd, Sk, Jp, Jz, St, Param, Call, Ret.
En plus des token de base que nous avions déjà vu precédemment dans le mini-projet, la difficulté qui s'ajoute cette fois ci reste principalement la gestion des environnements
pour le cas des commandes Param, Call et Ret.
Nous avons opté à gérer cela en stockant l'environnement global avant l'appel d'une fonction.Cette dernière a bien son propre environnement qui, lui, est local.
L'environnement local s'occupera d'exécuter les intructions de l'appel de fonction et retournera une variable de retour de type Quad qui est un quadruplet resultant du Call.
Un environnement temporaire est prévu pour la gestion de paramètres de la fonction.Il servira de stockage temporaire.
Le bout de code suivant illustre le mécanisme du cas d'appel de fonction :
\begin{verbatim}
 ENV env= Envalloc(); /* env local*/
 ENV G =env; /* env global*/
 ENV L, P; /* env tmp de gestion*/
 else if (elem->OP == Param){
            initenv(&P, elem->ARG1, creer_type(0,T_int));
            affect(P, elem->ARG1, valch(G, elem->ARG2));
            elem = elem->SUIV;
            break;
         }
else if (elem->OP == Call){
		L = copier_env(env);
                liberer_env(P);
                varloc = 1;
                retvar = elem->RES;
                retaddr = elem->SUIV;
                elem = rechbq(elem->ARG1,list);
            break;
        }
\end{verbatim}
Dans le cas du Ret, on cherchera juste à recupérer le quadruplet résultant :
\begin{verbatim}
else if (elem->OP == Ret){
		     affect(G, retvar, valch(L, elem->ARG1));
                                varloc = 0;
                                 elem = retaddr;
		     break;
        }
\end{verbatim}
A la fin, on n'oublie pas d'afficher l'environnement.
\section{Compilateur PPascal}
Cette partie consistait à traduire (ou compiler) le code Pseudo-Pascal en Code à Trois Adrsses. Le compilateur se base principalement sur la grammaire du PP dans le fichier ppascal.y, des environnements et d'autres modules que nous avons crées nous-mêmes. Nous n'avons utilisé aucune autre structure que celles déjà existantes. En effet, à l'instar de l'interpréteur, le compilateur utilise quasiment les mêmes environnements et structures et traduit toute instruction déjà interprétée.
Notre traducteur fonctionne ainsi:

\begin{itemize}
    \item Pour presque chaque règle dans la grammaire, nous créons un noeud via la fonction:
    \begin{verbatim}Noeud *create_noeud(Noeud * FilsGauche, Noeud *FilsDroit, char * ETIQ, int Oper, type* type)\end{verbatim}
    \item On parcourt l'arbre en prefixe pour traduire chaque opérateur et ses fils de manière récursive.
    \item Nous nous sommes servis aussi de la liste de focntions qui est est une structure contenant deux champs qui pointent respectivement au début et à la fin d'une liste chaînée de focntions. Cette liste est définie comme suit:
    \begin{verbatim}
        typedef struct cellfon {
            char *ID;               /* identificateur de la fonction */
            BILENV PARAM;           /* parametres formels types  */
            BILENV VARLOC;          /* variables locales typees */
            Noeud* CORPS;           /* le corps de la fonction */
            type* typeno;
            struct cellfon *SUIV;
        } *LFON;
    \end{verbatim}
    Pour faire la traduction des focntions, nous parcourons la liste et convertissons chaque élément en noeud graâce à la fonction dont son prototype est donnée ci-dessous:
    \begin{verbatim}Noeud* fonc2noeud(LFON lfon);\end{verbatim}
\end{itemize}
Nous nous sommes bien documentés et avons travaillé sérieusement cette partie qui a été très délicate, notamment avec l'utilisation des tableaux et fonctions. Néanmoins, nous avons pas mal de petites erreurs d'éxécution
qui sont obtenues à la dernière minute et qu'on n'a malheureusement pas le temps de les résoudre.

\end{document}
